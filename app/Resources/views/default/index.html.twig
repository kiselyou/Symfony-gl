{% extends 'base.html.twig' %}

{% block stylesheets %}
    <link href="{{ asset('css/theme-galaxy.css') }}" rel="stylesheet" />
{% endblock %}

{% block body %}
    <div id="sw-container"></div>
{% endblock %}

{% block javascripts %}

    <script src="{{ asset('js/core/api/Array.js') }}"></script>
    <script src="{{ asset('js/three/three.js') }}"></script>


    <script src="{{ asset('js/three/dat.gui.min.js') }}"></script>

    <script src="{{ asset('js/three/EffectComposer.js') }}"></script>
    <script src="{{ asset('js/three/RenderPass.js') }}"></script>
    <script src="{{ asset('js/three/ShaderPass.js') }}"></script>
    <script src="{{ asset('js/three/FXAAShader.js') }}"></script>
    <script src="{{ asset('js/three/CopyShader.js') }}"></script>

    <script src="{{ asset('models/ModelData.js') }}"></script>
    <script src="{{ asset('js/three/loaders/OBJLoader.js') }}"></script>
    <script src="{{ asset('js/three/controls/PlanetControls.js') }}"></script>
    <script src="{{ asset('js/three/controls/OrbitControls.js') }}"></script>
    <script src="{{ asset('js/three/controls/ModelControls.js') }}"></script>








    <script>
        document.addEventListener("DOMContentLoaded", function () {

            var gui = new dat.GUI();

            var params = {
                near: -1000,
                far: 1000,
                up: {
                    x: 0,
                    y: 0,
                    z: -1
                },
                lookAt: {
                    x: 0,
                    y: 1,
                    z: 0
                },

                scale: 2,
                ta: {
                    w: 320,
                    h: 240
                },
                s: {
                    w: 320,
                    h: 240
                }
            };

            gui.add( params, 'near', -10000, 10000 );
            gui.add( params, 'far', -10000, 10000 );
            gui.add( params.up, 'x', -10, 10 );
            gui.add( params.up, 'y', -10, 10 );
            gui.add( params.up, 'z', -10, 10 );

            gui.add( params.lookAt, 'x', -10, 10 );
            gui.add( params.lookAt, 'y', -10, 10 );
            gui.add( params.lookAt, 'z', -10, 10 );

            gui.add( params, 'scale', 0.1, 10 );
            gui.add( params.ta, 'w', -10000, 10000 );
            gui.add( params.ta, 'h', -10000, 10000 );

            gui.add( params.s, 'w', -10000, 10000 );
            gui.add( params.s, 'h', -10000, 10000 );
//            gui.add( params, 'exposure', 0.1, 2 );
//            gui.add( params, 'autoRotate' );
//            gui.add( params, 'gemColor', [ 'Blue', 'Green', 'Red', 'White', 'Black' ] );
            gui.open();

            var SW_CONTAINER = 'sw-container';
            var width = window.innerWidth;
            var height = window.innerHeight;
            var aspect =  width / height;

            var scene = new THREE.Scene();
            var renderer = new THREE.WebGLRenderer();



            var camera = new THREE.PerspectiveCamera( 45, aspect, 0.1, 1000000 );
            camera.aspect = aspect;
            camera.position.x = 100;
            camera.position.z = 100;
            camera.position.y = 100;

            var mapCamera, mapWidth = 320, mapHeight = 240;
            mapCamera = new THREE.OrthographicCamera( width / - params.scale, width / params.scale, height / params.scale, height / - params.scale, params.near, params.far );
//            mapCamera.up = new THREE.Vector3(0, 0, -1);
//            mapCamera.lookAt( new THREE.Vector3(0,-1,0) );
//            scene.add(mapCamera);







//            var composer = new THREE.EffectComposer( renderer );
//            var renderModel = new THREE.RenderPass( scene, camera );
//            var effectFXAA = new THREE.ShaderPass( THREE.FXAAShader );
            var widthddd = window.innerWidth || 2;
            var heightssss = window.innerHeight || 2;
//            effectFXAA.uniforms[ 'resolution' ].value.set( 1 / widthddd, 1 / heightssss );
//             var effectCopy = new THREE.ShaderPass( THREE.CopyShader );
//            effectFXAA.renderToScreen = true;
//
//            composer.addPass( renderModel );
//            composer.addPass( effectFXAA );
//            composer.addPass( effectCopy );


            var ssssssssss = new THREE.WebGLRenderTarget( params.ta.w, params.ta );
            var mapComposer = new THREE.EffectComposer( renderer, ssssssssss );
//            mapComposer.setSize( width * 2, height * 2 );
            var renderModel2 = new THREE.RenderPass( scene, mapCamera );
            mapComposer.addPass( renderModel2 );
            var effectFXAA2 = new THREE.ShaderPass( THREE.FXAAShader );
            effectFXAA2.uniforms[ 'resolution' ].value.set( 1 / widthddd, 1 / heightssss );
            effectFXAA2.renderToScreen = true;
            mapComposer.addPass( effectFXAA2 );



            var container = document.getElementById( SW_CONTAINER );

            var hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 0.6 );
            hemiLight.color.setHSL( 0.6, 1, 0.6 );
            hemiLight.groundColor.setHSL( 0.095, 1, 0.75 );
            hemiLight.position.set( 0, 500, 0 );
            scene.add( hemiLight );
            //
            var dirLight = new THREE.DirectionalLight( 0xffffff, 1 );
            dirLight.color.setHSL( 0.1, 1, 0.95 );
            dirLight.position.set( -1, 1.75, 1 );
            dirLight.position.multiplyScalar( 50 );
            scene.add( dirLight );
            dirLight.castShadow = true;
            dirLight.shadow.mapSize.width = 2048;
            dirLight.shadow.mapSize.height = 2048;

            var d = 50;
            dirLight.shadow.camera.left = -d;
            dirLight.shadow.camera.right = d;
            dirLight.shadow.camera.top = d;
            dirLight.shadow.camera.bottom = -d;
            dirLight.shadow.camera.far = 3500;
            dirLight.shadow.bias = -0.0001;

            var planetControls = new THREE.PlanetControls( scene, camera );
            planetControls.load( true, function ( a, b ) {
                console.log( a, b );
            } );

            // HELPERS
            var axis = new THREE.AxisHelper( 10 );
            scene.add( axis );

            // GRID
            var color = new THREE.Color( 0x00ffff );
            var grid = new THREE.GridHelper( 1000, 100, color, 0x888888 );
            scene.add( grid );

//            var orbitControl = new THREE.OrbitControls( camera, renderer.domElement );
//            orbitControl.mouseButtons = { ORBIT: THREE.MOUSE.RIGHT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.LEFT };
////            orbitControl.enablePan = false;
////            orbitControl.enableKeys = false;
//            orbitControl.minDistance = 20;
//            orbitControl.keyPanSpeed = 70;
//            orbitControl.maxPolarAngle = 65 * Math.PI / 180;
//            orbitControl.maxDistance = 500;
//            orbitControl.rotateSpeed = 3.0;

            var modelControls = new THREE.ModelControls( camera, scene, renderer.domElement, container );
            modelControls.loadObject( 'models/M1/Spaceship1.obj', function ( object ) {
                object.children[0].rotateX(Math.PI / 2);
                object.children[0].rotateY(Math.PI);
            } );

            modelControls.addIntersectExceptUUID( axis.uuid );
            modelControls.addIntersectExceptUUID( grid.uuid );


            container.appendChild( renderer.domElement );
            window.addEventListener( 'resize', windowResize, false );

            renderer.setSize( width, height );

            renderer.autoClear = false;

            render();

            function windowResize () {
                camera.updateProjectionMatrix();
                renderer.setSize( width, height );
            }

            function render () {
                requestAnimationFrame( render );




                var w = window.innerWidth, h = window.innerHeight;
                renderer.setViewport( 0, 0, w, h );
//                renderer.clear();
                renderer.render( scene, camera );

                planetControls.update();

                if ( modelControls ) {
                    modelControls.update();
                }


                mapCamera.near = params.near;
                mapCamera.far = params.far;
                mapCamera.up = new THREE.Vector3().copy(params.up);

                mapCamera.lookAt( new THREE.Vector3().copy(params.lookAt) );


                mapCamera.left = width / - params.scale;
                mapCamera.right = width / params.scale;
                mapCamera.top = height / params.scale;
                mapCamera.bottom = height / - params.scale;

                ssssssssss.width = params.ta.w;
                ssssssssss.height = params.ta.h;

                mapComposer.setSize( params.s.w, params.s.h );

                var ssss = modelControls.getModel();
                if (ssss) {

//                    mapCamera.position.copy(ssss.position);
//                    mapCamera.position.y = 1500;
                }




                renderer.setViewport( w - mapWidth - 10, 10, mapWidth, mapHeight );





                renderer.render( scene, mapCamera );

//                composer.render();
                mapComposer.render();

                // Это временно пока неработает CameraControl
//                if ( orbitControl ) {
////                    orbitControl.target.copy( modelControls.getModel().position );
//                    orbitControl.update();
//                }
            }
        });
    </script>
{% endblock %}
