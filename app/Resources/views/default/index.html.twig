{% extends 'base.html.twig' %}

{% block stylesheets %}
    <link href="{{ asset('css/theme-galaxy.css') }}" rel="stylesheet" />
{% endblock %}

{% block body %}
    <div id="sw-container"></div>
{% endblock %}

{% block javascripts %}

    <script src="{{ asset('js/core/api/Array.js') }}"></script>
    <script src="{{ asset('js/three/three.js') }}"></script>
    <script src="{{ asset('models/ModelData.js') }}"></script>
    <script src="{{ asset('js/three/loaders/OBJLoader.js') }}"></script>
    <script src="{{ asset('js/three/controls/PlanetControls.js') }}"></script>
    <script src="{{ asset('js/three/controls/OrbitControls.js') }}"></script>
    <script src="{{ asset('js/three/controls/ModelControls.js') }}"></script>








    <script>
        document.addEventListener("DOMContentLoaded", function () {

            var SW_CONTAINER = 'sw-container';
            var width = window.innerWidth;
            var height = window.innerHeight;
            var aspect =  width / height;

            var scene = new THREE.Scene();
            var renderer = new THREE.WebGLRenderer();
            renderer.setSize( width, height );


//            renderer.setClearColor( 0x000000, 1 );

            renderer.autoClear = false;


            var camera = new THREE.PerspectiveCamera( 45, aspect, 0.1, 100000000 );
            camera.aspect = aspect;
            camera.position.x = 100;
            camera.position.z = 100;
            camera.position.y = 100;


            var mapCamera, mapWidth = 240, mapHeight = 160;
//            mapCamera = new THREE.OrthographicCamera(
//                    width / -2,		// Left
//                    width / 2,		// Right
//                    height / 2,		// Top
//                    height / -2,	// Bottom
//                    -5000,            			// Near
//                    1000 );           			// Far
//            mapCamera.up = new THREE.Vector3(0,-10,-1);
//            mapCamera.lookAt( new THREE.Vector3(0,-1,0) );
//            scene.add(mapCamera);


            mapCamera = new THREE.OrthographicCamera(
                    -1000,		// Left
                    1000,		// Right
                    1000,		// Top
                    -1000,		// Bottom
                    1,            			// Near
                    1000 );           			// Far
            mapCamera.up = new THREE.Vector3(0,0,-1);
            mapCamera.lookAt( new THREE.Vector3(0,-1,0) );
            mapCamera.position.y = 500;




            var container = document.getElementById( SW_CONTAINER );

            var hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 0.6 );
            hemiLight.color.setHSL( 0.6, 1, 0.6 );
            hemiLight.groundColor.setHSL( 0.095, 1, 0.75 );
            hemiLight.position.set( 0, 500, 0 );
            scene.add( hemiLight );
            //
            var dirLight = new THREE.DirectionalLight( 0xffffff, 1 );
            dirLight.color.setHSL( 0.1, 1, 0.95 );
            dirLight.position.set( -1, 1.75, 1 );
            dirLight.position.multiplyScalar( 50 );
            scene.add( dirLight );
            dirLight.castShadow = true;
            dirLight.shadow.mapSize.width = 2048;
            dirLight.shadow.mapSize.height = 2048;

            var d = 50;
            dirLight.shadow.camera.left = -d;
            dirLight.shadow.camera.right = d;
            dirLight.shadow.camera.top = d;
            dirLight.shadow.camera.bottom = -d;
            dirLight.shadow.camera.far = 3500;
            dirLight.shadow.bias = -0.0001;

            var planetControls = new THREE.PlanetControls( scene, camera );
            planetControls.load( true, function ( a, b ) {
                console.log( a, b );
            } );

            // HELPERS
            var axis = new THREE.AxisHelper( 10 );
            scene.add( axis );

            // GRID
            var color = new THREE.Color( 0x00ffff );
            var grid = new THREE.GridHelper( 1000, 100, color, 0x888888 );
            scene.add( grid );

//            var orbitControl = new THREE.OrbitControls( camera, renderer.domElement );
//            orbitControl.mouseButtons = { ORBIT: THREE.MOUSE.RIGHT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.LEFT };
////            orbitControl.enablePan = false;
////            orbitControl.enableKeys = false;
//            orbitControl.minDistance = 20;
//            orbitControl.keyPanSpeed = 70;
//            orbitControl.maxPolarAngle = 65 * Math.PI / 180;
//            orbitControl.maxDistance = 500;
//            orbitControl.rotateSpeed = 3.0;

            var modelControls = new THREE.ModelControls( camera, scene, renderer.domElement, container );
            modelControls.loadObject( 'models/M1/Spaceship1.obj', function ( object ) {
                object.children[0].rotateX(Math.PI / 2);
                object.children[0].rotateY(Math.PI);
            } );

            modelControls.addIntersectExceptUUID( axis.uuid );
            modelControls.addIntersectExceptUUID( grid.uuid );


            container.appendChild( renderer.domElement );
            window.addEventListener( 'resize', windowResize, false );
            render();

            function windowResize () {
                camera.updateProjectionMatrix();
                renderer.setSize( width, height );
            }

            function render () {
                requestAnimationFrame( render );

                renderer.setViewport( 0, 0, width, height );
//                renderer.clear();
                renderer.render( scene, camera );

                planetControls.update();

                if ( modelControls ) {
                    modelControls.update();
                }

                var ssss = modelControls.getModel();
                if (ssss) {

                    mapCamera.position.copy(ssss.position);
                    mapCamera.position.y = 500;
                }
                renderer.setViewport( 10, height - mapHeight - 10, mapWidth, mapHeight );
                renderer.render( scene, mapCamera );



                // Это временно пока неработает CameraControl
//                if ( orbitControl ) {
////                    orbitControl.target.copy( modelControls.getModel().position );
//                    orbitControl.update();
//                }
            }
        });
    </script>
{% endblock %}
