{% extends 'iw.html.twig' %}

{% block container %}

    <div id="iw-container"></div>

{% endblock %}

{% block javascripts %}

    {{ parent() }}

    <script type="application/javascript">

        document.addEventListener('DOMContentLoaded', function () {

            var map = {
                path: '{{ asset('/images/textures/galaxy/A/') }}',
                names: ['dark-s-px', 'dark-s-nx', 'dark-s-py', 'dark-s-ny', 'dark-s-pz', 'dark-s-nz'],
                extension: '.png'
            };

            var initScene = new IW.SceneControls( 'iw-container', false );

            /**
             *
             * @type {IW.MultiLoader}
             */
            var multiLoader = new IW.MultiLoader();

            // UPLOAD TEXTURES MAP
            for ( var i = 0; i < map.names.length; i++ ) {
                var lbl = 'label - texture ' + map.names[ i ];
                multiLoader.addLoadTexture( map.names[ i ], lbl, map.path + map.names[ i ] + map.extension );
            }

            // UPLOAD CITY
            multiLoader.addLoadOBJ( IW.SceneControls.MODEL_G1_A, 'CITY - A', '{{asset('/models/G1/A/')}}', 'city.obj', 'city.mtl' );
            // UPLOAD SHIPS
            multiLoader.addLoadOBJ( IW.SceneControls.MODEL_S1_A, 'SHIPS - A', '{{asset('/models/S1/A/')}}', 'starship.obj', 'starship.mtl' );
            multiLoader.addLoadOBJ( IW.SceneControls.MODEL_S1_B, 'SHIPS - B', '{{asset('/models/S1/B/')}}', 'starship.obj', 'starship.mtl' );
            multiLoader.addLoadOBJ( IW.SceneControls.MODEL_S1_C, 'SHIPS - C', '{{asset('/models/S1/C/')}}', 'starship.obj', 'starship.mtl' );
            multiLoader.addLoadOBJ( IW.SceneControls.MODEL_S1_D, 'SHIPS - D', '{{asset('/models/S1/D/')}}', 'starship.obj', 'starship.mtl' );
            // UPLOAD ROCKETS
            multiLoader.addLoadOBJ( IW.SceneControls.MODEL_R1_A, 'ROCKETS - A', '{{asset('/models/R1/A/')}}', 'rocket.obj', 'rocket.mtl' );
            multiLoader.addLoadOBJ( IW.SceneControls.MODEL_R1_B, 'ROCKETS - B', '{{asset('/models/R1/B/')}}', 'rocket.obj', 'rocket.mtl' );
            multiLoader.addLoadOBJ( IW.SceneControls.MODEL_R1_C, 'ROCKETS - C', '{{asset('/models/R1/C/')}}', 'rocket.obj', 'rocket.mtl' );

            multiLoader.setLoadedCallback( function ( params ) {
                switch ( params.name ) {

                    case IW.SceneControls.MODEL_G1_A:

                        params.object.scale.copy( new THREE.Vector3( 3, 3, 3 ) );
                        params.object.position.z = 3000;
                        params.object.position.y = - 200;
                        initScene.scene.add( params.object );
                        break;

                    case IW.SceneControls.MODEL_S1_A:

                        params.object.children[0].position.y = -80;
                        params.object.scale.copy( new THREE.Vector3( 0.1, 0.1, 0.1 ) );
                        break;

                    case IW.SceneControls.MODEL_S1_B:

                        params.object.position.x = - 40;
                        params.object.children[0].rotation.x = 90 * Math.PI / 180;
                        params.object.children[0].rotation.y = Math.PI;
                        params.object.scale.copy( new THREE.Vector3( 3, 3, 3 ) );

                        initScene.scene.add( params.object );
                        break;

                    case IW.SceneControls.MODEL_S1_C:

                        params.object.position.x = 40;
                        params.object.scale.copy( new THREE.Vector3( 3, 3, 3 ) );
                        initScene.scene.add( params.object );
                        break;

                    case IW.SceneControls.MODEL_S1_D:

                        params.object.position.x = -100;
                        params.object.children[0].rotation.y = Math.PI;
                        params.object.children[0].rotation.x = 90 * Math.PI / 180;
                        params.object.scale.copy( new THREE.Vector3( 3, 3, 3 ) );
                        initScene.scene.add( params.object );
                        break;

                    case IW.SceneControls.MODEL_R1_A:

                        params.object.scale.copy( new THREE.Vector3( 1, 1, 1 ) );
                        break;

                    case IW.SceneControls.MODEL_R1_B:

                        params.object.scale.copy( new THREE.Vector3( 1, 1, 1 ) );
                        params.object.children[0].rotation.y = Math.PI;
                        break;

                    case IW.SceneControls.MODEL_R1_C:

                        params.object.scale.copy( new THREE.Vector3( 1, 1, 1 ) );
                        params.object.children[0].rotation.y = 90 * Math.PI / 180;
                        break;
                }
            } );

            multiLoader.load(function () {

                initScene.map( multiLoader, map );
                initScene.initFlyControl( multiLoader );
                initScene.initScene();

            });
        });
    </script>

{% endblock %}